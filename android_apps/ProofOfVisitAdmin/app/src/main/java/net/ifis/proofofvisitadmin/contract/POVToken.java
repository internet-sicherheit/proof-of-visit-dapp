package net.ifis.proofofvisitadmin.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class POVToken extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806370a0823111610104578063cd9b95e1116100a2578063de5b9b7211610071578063de5b9b7214611079578063ea9071171461113e578063fca1c6f7146111ac578063ff74927b14611269576101da565b8063cd9b95e114610eb5578063cec21acb14610f5c578063d0bfd4cc14610fb4578063d858917d14610fd2576101da565b8063a9059cbb116100de578063a9059cbb14610b51578063b45e08e314610b9f578063b7a1405c14610c5c578063b9e0db3514610d03576101da565b806370a0823114610a3d5780637e56af5914610a955780637f2e06e314610aed576101da565b80632a5c43991161017c5780636352211e1161014b5780636352211e146107c3578063640e151c1461083157806365a6e340146108d857806369f9ad2f14610995576101da565b80632a5c4399146105a0578063380ae4db1461060e5780633ab0bfd61461062c5780635e57966d14610706576101da565b8063129f7ee2116101b8578063129f7ee2146103e9578063142ec2cc1461045757806318160ddd1461051457806323b872dd14610532576101da565b806301ffc9a7146101df578063033e56b314610244578063095ea7b31461039b575b600080fd5b61022a600480360360208110156101f557600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050611434565b604051808215151515815260200191505060405180910390f35b6103856004803603608081101561025a57600080fd5b810190808035906020019064010000000081111561027757600080fd5b82018360208201111561028957600080fd5b803590602001918460018302840111640100000000831117156102ab57600080fd5b9091929391929390803590602001906401000000008111156102cc57600080fd5b8201836020820111156102de57600080fd5b8035906020019184600183028401116401000000008311171561030057600080fd5b90919293919293908035906020019064010000000081111561032157600080fd5b82018360208201111561033357600080fd5b8035906020019184600183028401116401000000008311171561035557600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061143f565b6040518082815260200191505060405180910390f35b6103e7600480360360408110156103b157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611afb565b005b610415600480360360208110156103ff57600080fd5b8101908080359060200190929190505050611b9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104996004803603602081101561046d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bda565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104d95780820151818401526020810190506104be565b50505050905090810190601f1680156105065780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61051c611cd9565b6040518082815260200191505060405180910390f35b61059e6004803603606081101561054857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ce6565b005b6105cc600480360360208110156105b657600080fd5b8101908080359060200190929190505050611d8a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610616611dd2565b6040518082815260200191505060405180910390f35b6106586004803603602081101561064257600080fd5b8101908080359060200190929190505050611dde565b60405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156106ca5780820151818401526020810190506106af565b50505050905090810190601f1680156106f75780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6107486004803603602081101561071c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ec7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561078857808201518184015260208101905061076d565b50505050905090810190601f1680156107b55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6107ef600480360360208110156107d957600080fd5b81019080803590602001909291905050506120d3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61085d6004803603602081101561084757600080fd5b8101908080359060200190929190505050612110565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561089d578082015181840152602081019050610882565b50505050905090810190601f1680156108ca5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61091a600480360360208110156108ee57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121d0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561095a57808201518184015260208101905061093f565b50505050905090810190601f1680156109875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6109e3600480360360208110156109ab57600080fd5b8101908080357effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506122cf565b60405180827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610a7f60048036036020811015610a5357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612303565b6040518082815260200191505060405180910390f35b610ad760048036036020811015610aab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061234c565b6040518082815260200191505060405180910390f35b610b4f60048036036040811015610b0357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612364565b005b610b9d60048036036040811015610b6757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506125cf565b005b610be160048036036020811015610bb557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612672565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c21578082015181840152602081019050610c06565b50505050905090810190601f168015610c4e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610c8860048036036020811015610c7257600080fd5b8101908080359060200190929190505050612b0d565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610cc8578082015181840152602081019050610cad565b50505050905090810190601f168015610cf55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610d2f60048036036020811015610d1957600080fd5b8101908080359060200190929190505050612b5d565b604051808060200180602001806020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848103845288818151815260200191508051906020019080838360005b83811015610da9578082015181840152602081019050610d8e565b50505050905090810190601f168015610dd65780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360005b83811015610e0f578082015181840152602081019050610df4565b50505050905090810190601f168015610e3c5780820380516001836020036101000a031916815260200191505b50848103825286818151815260200191508051906020019080838360005b83811015610e75578082015181840152602081019050610e5a565b50505050905090810190601f168015610ea25780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b610ee160048036036020811015610ecb57600080fd5b8101908080359060200190929190505050612d82565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610f21578082015181840152602081019050610f06565b50505050905090810190601f168015610f4e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610f9e60048036036020811015610f7257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612dd2565b6040518082815260200191505060405180910390f35b610fbc612dea565b6040518082815260200191505060405180910390f35b610ffe60048036036020811015610fe857600080fd5b8101908080359060200190929190505050612df6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561103e578082015181840152602081019050611023565b50505050905090810190601f16801561106b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61113c6004803603604081101561108f57600080fd5b8101908080359060200190929190803590602001906401000000008111156110b657600080fd5b8201836020820111156110c857600080fd5b803590602001918460018302840111640100000000831117156110ea57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612ea6565b005b61116a6004803603602081101561115457600080fd5b8101908080359060200190929190505050612ed2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6111ee600480360360208110156111c257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612f05565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561122e578082015181840152602081019050611213565b50505050905090810190601f16801561125b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6113b96004803603604081101561127f57600080fd5b810190808035906020019064010000000081111561129c57600080fd5b8201836020820111156112ae57600080fd5b803590602001918460018302840111640100000000831117156112d057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561133357600080fd5b82018360208201111561134557600080fd5b8035906020019184600183028401116401000000008311171561136757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613004565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156113f95780820151818401526020810190506113de565b50505050905090810190601f1680156114265780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b600060019050919050565b6000806000905060008090506000809050600080905060008090505b60008054905081101561180f578673ffffffffffffffffffffffffffffffffffffffff166002828154811061148c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156114d857600194505b6115dc600082815481106114e857fe5b90600052602060002090600402016002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561158d5780601f106115625761010080835404028352916020019161158d565b820191906000526020600020905b81548152906001019060200180831161157057829003601f168201915b50505050508a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506130cc565b156115e657600193505b6116ea600082815481106115f657fe5b90600052602060002090600402016000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561169b5780601f106116705761010080835404028352916020019161169b565b820191906000526020600020905b81548152906001019060200180831161167e57829003601f168201915b50505050508e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506130cc565b156116f457600192505b6117f86000828154811061170457fe5b90600052602060002090600402016001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117a95780601f1061177e576101008083540402835291602001916117a9565b820191906000526020600020905b81548152906001019060200180831161178c57829003601f168201915b50505050508c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506130cc565b1561180257600191505b808060010191505061145b565b50600080805490501480611857575060001515841515148015611836575060001515831515145b8015611846575060001515821515145b8015611856575060001515811515145b5b15611aec576118646132e8565b60405180608001604052808e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018873ffffffffffffffffffffffffffffffffffffffff1681525090506000819080600181540180825580915050906001820390600052602060002090600402016000909192909190915060008201518160000190805190602001906119b3929190613326565b5060208201518160010190805190602001906119d0929190613326565b5060408201518160020190805190602001906119ed929190613326565b5060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505060028790806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600160008054905003600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b50505050979650505050505050565b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925338383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050565b60028181548110611bab57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110611c2857fe5b90600052602060002090600402016001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ccd5780601f10611ca257610100808354040283529160200191611ccd565b820191906000526020600020905b815481529060010190602001808311611cb057829003601f168201915b50505050509050919050565b6000600180549050905090565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b600060018281548110611d9957fe5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60018181548110611deb57fe5b9060005260206000209060020201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e975780601f10611e6c57610100808354040283529160200191611e97565b820191906000526020600020905b815481529060010190602001808311611e7a57829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b606080602a6040519080825280601f01601f191660200182016040528015611efe5781602001600182028038833980820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611f2f57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611f8c57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060008090505b60148110156120c95760008160130360080260020a8573ffffffffffffffffffffffffffffffffffffffff1681611ff457fe5b0460f81b9050600060108260f81c60ff168161200c57fe5b0460f81b905060008160f81c6010028360f81c0360f81b905061202e826122cf565b85856002026002018151811061204057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612078816122cf565b85856002026003018151811061208a57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050508080600101915050611fc1565b5080915050919050565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60606001828154811061211f57fe5b90600052602060002090600202016000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121c45780601f10612199576101008083540402835291602001916121c4565b820191906000526020600020905b8154815290600101906020018083116121a757829003601f168201915b50505050509050919050565b60606000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061221e57fe5b90600052602060002090600402016002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122c35780601f10612298576101008083540402835291602001916122c3565b820191906000526020600020905b8154815290600101906020018083116122a657829003601f168201915b50505050509050919050565b6000600a8260f81c60ff1610156122f15760308260f81c0160f81b90506122fe565b60578260f81c0160f81b90505b919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60046020528060005260406000206000915090505481565b61236c6133a6565b60405180604001604052806000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106123c357fe5b90600052602060002090600402016002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124685780601f1061243d57610100808354040283529160200191612468565b820191906000526020600020905b81548152906001019060200180831161244b57829003601f168201915b505050505081526020018473ffffffffffffffffffffffffffffffffffffffff1681525090506000600180839080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000190805190602001906124db929190613326565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050039050826003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050555050505050565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef338383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050565b6060806040518060400160405280600181526020017f5b00000000000000000000000000000000000000000000000000000000000000815250905060008090505b600180549050811015612b03578373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612ab557612766826040518060400160405280600181526020017f7b00000000000000000000000000000000000000000000000000000000000000815250613004565b91506127a7826040518060400160405280601381526020017f226c6f636174696f6e61646472657373223a2200000000000000000000000000815250613004565b91506127c3826127be6127b984611d8a565b611ec7565b613004565b9150612804826040518060400160405280600281526020017f222c000000000000000000000000000000000000000000000000000000000000815250613004565b9150612845826040518060400160405280601081526020017f226c6f636174696f6e6e616d65223a2200000000000000000000000000000000815250613004565b91506128598261285483612110565b613004565b915061289a826040518060400160405280600281526020017f222c000000000000000000000000000000000000000000000000000000000000815250613004565b91506128db826040518060400160405280600d81526020017f22746f6b656e6e616d65223a2200000000000000000000000000000000000000815250613004565b91506128ef826128ea83612d82565b613004565b9150612930826040518060400160405280600281526020017f222c000000000000000000000000000000000000000000000000000000000000815250613004565b9150612971826040518060400160405280600f81526020017f22746f6b656e73796d626f6c223a220000000000000000000000000000000000815250613004565b91506129858261298083612b0d565b613004565b91506129c6826040518060400160405280600281526020017f222c000000000000000000000000000000000000000000000000000000000000815250613004565b9150612a07826040518060400160405280600881526020017f22746f6b656e223a000000000000000000000000000000000000000000000000815250613004565b9150612a1b82612a16836131bb565b613004565b91506001808054905003811415612a7257612a6b826040518060400160405280600281526020017f227d000000000000000000000000000000000000000000000000000000000000815250613004565b9150612ab4565b612ab1826040518060400160405280600381526020017f227d2c0000000000000000000000000000000000000000000000000000000000815250613004565b91505b5b612af4826040518060400160405280600181526020017f5d00000000000000000000000000000000000000000000000000000000000000815250613004565b915080806001019150506126b3565b5080915050919050565b6060612b5660018381548110612b1f57fe5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611bda565b9050919050565b60008181548110612b6a57fe5b9060005260206000209060040201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c165780601f10612beb57610100808354040283529160200191612c16565b820191906000526020600020905b815481529060010190602001808311612bf957829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612cb45780601f10612c8957610100808354040283529160200191612cb4565b820191906000526020600020905b815481529060010190602001808311612c9757829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612d525780601f10612d2757610100808354040283529160200191612d52565b820191906000526020600020905b815481529060010190602001808311612d3557829003601f168201915b5050505050908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b6060612dcb60018381548110612d9457fe5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612f05565b9050919050565b60056020528060005260406000206000915090505481565b60008080549050905090565b60066020528060005260406000206000915090508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e9e5780601f10612e7357610100808354040283529160200191612e9e565b820191906000526020600020905b815481529060010190602001808311612e8157829003601f168201915b505050505081565b80600660008481526020019081526020016000209080519060200190612ecd9291906133d6565b505050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110612f5357fe5b90600052602060002090600402016000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ff85780601f10612fcd57610100808354040283529160200191612ff8565b820191906000526020600020905b815481529060010190602001808311612fdb57829003601f168201915b50505050509050919050565b606082826040516020018083805190602001908083835b6020831061303e578051825260208201915060208101905060208303925061301b565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831061308f578051825260208201915060208101905060208303925061306c565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b6000816040516020018082805190602001908083835b6020831061310557805182526020820191506020810190506020830392506130e2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120836040516020018082805190602001908083835b602083106131775780518252602082019150602081019050602083039250613154565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014905092915050565b60606000821415613203576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506132e3565b600082905060005b6000821461322d578080600101915050600a828161322557fe5b04915061320b565b6060816040519080825280601f01601f1916602001820160405280156132625781602001600182028038833980820191505090505b50905060006001830390505b600086146132db57600a868161328057fe5b0660300160f81b8282806001900393508151811061329a57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86816132d357fe5b04955061326e565b819450505050505b919050565b6040518060800160405280606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061336757805160ff1916838001178555613395565b82800160010185558215613395579182015b82811115613394578251825591602001919060010190613379565b5b5090506133a29190613456565b5090565b604051806040016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061341757805160ff1916838001178555613445565b82800160010185558215613445579182015b82811115613444578251825591602001919060010190613429565b5b5090506134529190613456565b5090565b61347891905b8082111561347457600081600090555060010161345c565b5090565b9056fea265627a7a72315820c0fa2fec9def7cf3acd401ee3c64c080133e6bc6d6eadf10f44a50c98ae7e78d64736f6c63430005100032\n";

    public static final String FUNC_ADDRESSTOSTRING = "addressToString";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_CHAR = "char";

    public static final String FUNC_CREATELOCATION = "createLocation";

    public static final String FUNC_GETAMOUNTLOCATIONS = "getAmountLocations";

    public static final String FUNC_GETLOCATIONADDRESSFROMID = "getLocationAddressFromId";

    public static final String FUNC_GETLOCATIONNAMEFROMID = "getLocationNameFromId";

    public static final String FUNC_GETLOCATIONNAMEFROMLOCATIONADDRESS = "getLocationNameFromLocationAddress";

    public static final String FUNC_GETTOKENNAMEFROMID = "getTokenNameFromId";

    public static final String FUNC_GETTOKENSYMBOLFROMID = "getTokenSymbolFromId";

    public static final String FUNC_GETTOKENSYMBOLFROMLOCATIONADDRESS = "getTokenSymbolFromLocationAddress";

    public static final String FUNC_GETTOKENNAMEFROMLOCATIONADDRESS = "getTokennamefromLocationAddress";

    public static final String FUNC_GETUSERTOKENLIST = "getUserTokenlist";

    public static final String FUNC_LOCATIONIDTOLOCATIONNAME = "locationIDtoLocationName";

    public static final String FUNC_LOCATIONADDRESSES = "locationaddresses";

    public static final String FUNC_LOCATIONS = "locations";

    public static final String FUNC_OWNERADDRESSTOLOCATIONINDEX = "ownerAddressToLocationIndex";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_OWNERSHIPTOKENCOUNT = "ownershipTokenCount";

    public static final String FUNC_POVTOKENS = "povtokens";

    public static final String FUNC_REQUESTTOKEN = "requestToken";

    public static final String FUNC_SETLOCATIONNAMEFORID = "setLocationNameForId";

    public static final String FUNC_STRCONCAT = "strConcat";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TOKENINDEXTOOWNERADDRESS = "tokenIndexToOwnerAddress";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TOTALSUPPLYLOCATIONS = "totalSupplyLocations";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected POVToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected POVToken(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected POVToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected POVToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<String> addressToString(String x) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADDRESSTOSTRING, 
                Arrays.<Type>asList(new Address(160, x)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String _to, BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(160, _to),
                new Uint256(_tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String _owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(160, _owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> _char(byte[] b) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHAR, 
                Arrays.<Type>asList(new Bytes1(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> createLocation(String _tokenname, String _tokensymbol, String _locationname, String _locationWalletAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATELOCATION, 
                Arrays.<Type>asList(new Utf8String(_tokenname),
                new Utf8String(_tokensymbol),
                new Utf8String(_locationname),
                new Address(160, _locationWalletAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getAmountLocations() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAMOUNTLOCATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getLocationAddressFromId(BigInteger _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLOCATIONADDRESSFROMID, 
                Arrays.<Type>asList(new Uint256(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getLocationNameFromId(BigInteger _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLOCATIONNAMEFROMID, 
                Arrays.<Type>asList(new Uint256(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getLocationNameFromLocationAddress(String _address) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLOCATIONNAMEFROMLOCATIONADDRESS, 
                Arrays.<Type>asList(new Address(160, _address)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getTokenNameFromId(BigInteger _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOKENNAMEFROMID, 
                Arrays.<Type>asList(new Uint256(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getTokenSymbolFromId(BigInteger _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOKENSYMBOLFROMID, 
                Arrays.<Type>asList(new Uint256(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getTokenSymbolFromLocationAddress(String _address) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOKENSYMBOLFROMLOCATIONADDRESS, 
                Arrays.<Type>asList(new Address(160, _address)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getTokennamefromLocationAddress(String _address) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOKENNAMEFROMLOCATIONADDRESS, 
                Arrays.<Type>asList(new Address(160, _address)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getUserTokenlist(String useraddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERTOKENLIST, 
                Arrays.<Type>asList(new Address(160, useraddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> locationIDtoLocationName(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LOCATIONIDTOLOCATIONNAME, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> locationaddresses(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LOCATIONADDRESSES, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple4<String, String, String, String>> locations(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LOCATIONS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, String, String>>(function,
                new Callable<Tuple4<String, String, String, String>>() {
                    @Override
                    public Tuple4<String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> ownerAddressToLocationIndex(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNERADDRESSTOLOCATIONINDEX, 
                Arrays.<Type>asList(new Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger _tokenID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new Uint256(_tokenID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> ownershipTokenCount(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNERSHIPTOKENCOUNT, 
                Arrays.<Type>asList(new Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<String, String>> povtokens(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_POVTOKENS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple2<String, String>>(function,
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> requestToken(String _locationaddress, String _requestaddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REQUESTTOKEN, 
                Arrays.<Type>asList(new Address(160, _locationaddress),
                new Address(160, _requestaddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLocationNameForId(BigInteger _id, String _locationname) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETLOCATIONNAMEFORID, 
                Arrays.<Type>asList(new Uint256(_id),
                new Utf8String(_locationname)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> strConcat(String s1, String s2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STRCONCAT, 
                Arrays.<Type>asList(new Utf8String(s1),
                new Utf8String(s2)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] _interfaceID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(_interfaceID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> tokenIndexToOwnerAddress(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENINDEXTOOWNERADDRESS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupplyLocations() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLYLOCATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String requestaddress, BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Address(160, requestaddress),
                new Uint256(_tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, _from),
                new Address(160, _to),
                new Uint256(_tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static POVToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new POVToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static POVToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new POVToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static POVToken load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new POVToken(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static POVToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new POVToken(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<POVToken> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(POVToken.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<POVToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(POVToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<POVToken> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(POVToken.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<POVToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(POVToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
